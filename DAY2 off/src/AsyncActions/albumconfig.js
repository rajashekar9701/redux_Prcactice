import { configureStore, createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import axios from 'axios'

let initialState ={


    albums:[],

    isLoading:false,

    error:null
}



    //inside this we will call api

    //It will generate diff action types : Pending,Fulfilled,rejected
    //async call will return promise object
    // pending,fufilled,rejected

  export let fetchContent=  createAsyncThunk('/get/albums',async()=>{

    //we will call api


    //AJAX: XMLHTTPREquest,fetch,axios
    
       var response  = await  axios.get("https://jsonplaceholder.typicode.com/albums")
       var data=response.data
       console.log(data)
       return data

  })

      var albumSlice= createSlice({

        name:'albumSLice',
        initialState,

        extraReducers:(builder)=>{
            builder.addCase(fetchContent.pending,(state,action)=>{
    
                state.isLoading =true
            })
    
            builder.addCase(fetchContent.fulfilled,(state,action)=>{
    
                state.isLoading =false
                state.albums =action.payload
                console.log(action.payload)
            })
    
            builder.addCase(fetchContent.rejected,(state,action)=>{
    
                state.isLoading =false
                state.error = action.error.message
            })
        }

            //extraReducers will listen/handle action types that will be generated by createAsyncThunk
    //     extraReducers: (builder)=>{
    //             //we will handle Pending,Fulfilled,rejected action types
    //         builder.addCase(fetchContent.pending, (state,action)=>{
    //                     state.isLoading = true

    //         })    ,
    //         builder.addCase(fetchContent.fulfilled, (state,action)=>{
    //             state.isLoading = false

    //             state.albums = action.payload

    //         })    ,
    //         builder.addCase(fetchContent.rejected, (state,action)=>{

    //             console.log(action)
    //             state.isLoading = false
    //             state.error= action.error.message

    // })    

    //     }


     })



     export var albumSTore= configureStore({reducer: albumSlice.reducer})